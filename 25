import { motion } from 'framer-motion';
import { useLumaStatus } from '../contexts/LumaStatusContext';

const LumaOrb = () => {
    const { isListening, isSpeaking } = useLumaStatus();

    const getAnimationProps = () => {
        if (isListening) {
            return {
                scale: [1, 1.2, 1],
                opacity: [0.5, 0.8, 0.5],
                transition: { duration: 1, repeat: Infinity, ease: "easeInOut" }
            };
        }
        if (isSpeaking) {
            return {
                scale: [1.05, 0.95, 1.05],
                opacity: [0.6, 1, 0.6],
                transition: { duration: 1.5, repeat: Infinity, ease: "easeInOut" }
            };
        }
        // Default idle animation
        return {
            scale: [1, 1.1, 1],
            opacity: [0.3, 0.5, 0.3],
            transition: { duration: 3, repeat: Infinity, ease: "easeInOut" }
        };
    };

    return (
        <motion.div 
            className="fixed bottom-8 right-8 w-16 h-16 pointer-events-none"
        >
            <div className="relative w-full h-full">
                <motion.div 
                    className="absolute inset-0 bg-primary rounded-full"
                    animate={getAnimationProps()}
                />
                 <motion.div 
                    className="absolute inset-2 bg-primary/80 rounded-full"
                    animate={{
                        ...getAnimationProps(),
                        transition: { ...getAnimationProps().transition, delay: 0.2 }
                    }}
                />
                <div className="absolute inset-4 bg-primary rounded-full shadow-glow-primary"/>
            </div>
        </motion.div>
    );
};

export default LumaOrb;
