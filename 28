import { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { useAuth } from '../contexts/AuthContext';
import { ChatMessage } from '../types';
import { toast } from 'sonner';
import { getAIResponse } from '../services/ai';
import { useProfile } from '../contexts/ProfileContext';

export const useChat = () => {
  const { user } = useAuth();
  const { profile } = useProfile();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [loading, setLoading] = useState(true);
  const [isResponding, setIsResponding] = useState(false);

  const fetchChatHistory = useCallback(async () => {
    if (!user) return;

    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('chat_history')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: true });

      if (error) throw error;
      setMessages(data || []);
    } catch (error: any) {
      toast.error('Failed to load chat history.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchChatHistory();
  }, [fetchChatHistory]);

  const sendMessage = async (content: string) => {
    if (!user || !content.trim() || isResponding) return;

    setIsResponding(true);

    const userMessage: Omit<ChatMessage, 'id' | 'created_at'> = {
      user_id: user.id,
      content,
      role: 'user',
    };

    const tempUserMessage = { ...userMessage, id: `temp-user-${Date.now()}`, created_at: new Date().toISOString() };
    setMessages(prev => [...prev, tempUserMessage]);

    try {
      const { data: userMessageData, error: userError } = await supabase
        .from('chat_history')
        .insert(userMessage)
        .select()
        .single();

      if (userError) throw userError;
      
      setMessages(prev => prev.map(m => m.id === tempUserMessage.id ? userMessageData : m));

      const aiContent = await getAIResponse(content, profile?.language || 'English');

      const assistantMessage: Omit<ChatMessage, 'id' | 'created_at'> = {
        user_id: user.id,
        content: aiContent,
        role: 'assistant',
      };
      
      const { data: assistantMessageData, error: assistantError } = await supabase
        .from('chat_history')
        .insert(assistantMessage)
        .select()
        .single();
      
      if (assistantError) throw assistantError;

      setMessages(prev => [...prev, assistantMessageData]);

    } catch (error: any) {
      toast.error('Failed to send message.');
      setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id));
    } finally {
      setIsResponding(false);
    }
  };

  const clearChatHistory = async () => {
    if (!user) return;
    try {
        const { error } = await supabase.from('chat_history').delete().eq('user_id', user.id);
        if (error) throw error;
        setMessages([]);
    } catch(error) {
        console.error("Error clearing chat history:", error);
    }
  }

  return { messages, loading, sendMessage, isResponding, clearChatHistory };
};
