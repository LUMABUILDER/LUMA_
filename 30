import { useState, useRef, useEffect, useCallback } from 'react';
import { Mic, Send, Paperclip, Loader2, Square } from 'lucide-react';
import { useChat } from '../hooks/useChat';
import ChatMessage from '../components/chat/ChatMessage';
import { motion } from 'framer-motion';
import { useMedia } from '../hooks/useMedia';
import { toast } from 'sonner';
import { useSpeechRecognition } from '../hooks/useSpeechRecognition';
import { useLumaStatus } from '../contexts/LumaStatusContext';
import { useProfile } from '../contexts/ProfileContext';
import { getLanguageCode } from '../lib/utils';

const ChatPage = () => {
  const { messages, loading, sendMessage, isResponding } = useChat();
  const { uploadMedia } = useMedia();
  const { profile } = useProfile();
  const [input, setInput] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const { isListening } = useLumaStatus();
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleSpeechResult = useCallback((transcript: string) => {
    setInput(prev => prev ? `${prev} ${transcript}` : transcript);
  }, []);

  const { startListening, stopListening, isSupported } = useSpeechRecognition(handleSpeechResult);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]);

  const handleSend = () => {
    if (input.trim() && !isResponding) {
      sendMessage(input);
      setInput('');
    }
  };

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    const toastId = toast.loading(`Uploading ${file.name}...`);
    try {
      await uploadMedia(file);
      toast.success(`${file.name} uploaded successfully.`, { id: toastId });
    } catch (error) {
      toast.error(`Failed to upload ${file.name}.`, { id: toastId });
    } finally {
      setIsUploading(false);
      if(fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const handleMicClick = () => {
    if (isListening) {
      stopListening();
    } else {
      const langCode = getLanguageCode(profile?.language);
      startListening(langCode);
    }
  };

  const isDisabled = isResponding || isUploading;

  return (
    <div className="flex-1 flex flex-col p-6 h-full overflow-hidden">
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileSelect}
        className="hidden"
      />
      <div className="flex-1 space-y-6 overflow-y-auto pr-2">
        {loading ? (
          <div className="flex justify-center items-center h-full">
            <Loader2 className="w-8 h-8 text-primary animate-spin" />
          </div>
        ) : messages.length === 0 ? (
          <div className="flex justify-center items-center h-full">
            <p className="text-text-secondary">Your conversation with Luma starts here...</p>
          </div>
        ) : (
          <>
            {messages.map((msg) => (
              <ChatMessage key={msg.id} message={msg} />
            ))}
            {isResponding && (
                <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex items-center space-x-2"
                >
                    <Loader2 className="w-4 h-4 text-primary animate-spin" />
                    <p className="text-sm text-text-secondary">Luma is thinking...</p>
                </motion.div>
            )}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>
      <div className="mt-6">
        <div className="glass-pane flex items-center p-2 space-x-2">
            <button 
              onClick={handleMicClick}
              className={`p-3 transition-colors disabled:opacity-50 ${isListening ? 'text-red-500' : 'text-text-secondary hover:text-primary'}`} 
              disabled={isDisabled || !isSupported}
              title={isSupported ? (isListening ? 'Stop listening' : 'Start listening') : 'Voice not supported'}
            >
              {isListening ? <Square className="w-5 h-5" /> : <Mic className="w-5 h-5"/>}
            </button>
            <input 
                type="text"
                placeholder={isListening ? "Listening..." : isResponding ? "Luma is thinking..." : isUploading ? "Uploading file..." : "Ask Luma anything..."}
                className="flex-1 bg-transparent focus:outline-none text-white placeholder-text-secondary"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && handleSend()}
                disabled={isDisabled}
            />
            <button 
              onClick={() => fileInputRef.current?.click()}
              className="p-3 text-text-secondary hover:text-primary transition-colors disabled:opacity-50" 
              disabled={isDisabled}
            >
                {isUploading ? <Loader2 className="w-5 h-5 animate-spin"/> : <Paperclip className="w-5 h-5"/>}
            </button>
            <button 
                onClick={handleSend}
                className="p-3 bg-primary rounded-xl text-background hover:bg-primary-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={isDisabled || !input.trim()}
            >
                <Send className="w-5 h-5"/>
            </button>
        </div>
      </div>
    </div>
  );
};

export default ChatPage;
