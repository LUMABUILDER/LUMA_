import { useState } from 'react';
import { motion } from 'framer-motion';
import { Plus, Bell, Loader2, Trash2 } from 'lucide-react';
import { useReminders } from '../hooks/useReminders';
import { Reminder } from '../types';
import Modal from '../components/ui/Modal';
import { Button } from '../components/ui/Button';
import { Input } from '../components/ui/Input';

const ReminderForm = ({ onSubmit, onCancel, loading }: { onSubmit: (content: string, remind_at: string) => void, onCancel: () => void, loading: boolean }) => {
  const [content, setContent] = useState('');
  const [remindAt, setRemindAt] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(content, remindAt);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Input
        placeholder="What should I remind you about?"
        value={content}
        onChange={(e) => setContent(e.target.value)}
        required
      />
      <Input
        type="datetime-local"
        value={remindAt}
        onChange={(e) => setRemindAt(e.target.value)}
        required
      />
      <div className="flex justify-end space-x-2">
        <Button type="button" variant="ghost" onClick={onCancel}>Cancel</Button>
        <Button type="submit" loading={loading}>Set Reminder</Button>
      </div>
    </form>
  );
};

const ReminderItem = ({ reminder, onToggle, onDelete }: { reminder: Reminder, onToggle: (id: string, completed: boolean) => void, onDelete: (id: string) => void }) => (
    <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center space-x-4 glass-pane p-4"
    >
        <input 
            type="checkbox"
            checked={reminder.is_completed}
            onChange={() => onToggle(reminder.id, reminder.is_completed)}
            className="w-5 h-5 rounded-full text-primary bg-background-light border-border focus:ring-primary"
        />
        <div className="flex-1">
            <p className={`text-sm ${reminder.is_completed ? 'text-text-secondary line-through' : 'text-white'}`}>{reminder.content}</p>
            <p className={`text-xs ${reminder.is_completed ? 'text-text-secondary/70' : 'text-text-secondary'}`}>
                {new Date(reminder.remind_at).toLocaleString()}
            </p>
        </div>
        <button onClick={() => onDelete(reminder.id)} className="text-text-secondary hover:text-red-500"><Trash2 size={16}/></button>
    </motion.div>
);

const RemindersPage = () => {
  const { reminders, loading, addReminder, toggleReminder, deleteReminder } = useReminders();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formLoading, setFormLoading] = useState(false);

  const handleSubmit = async (content: string, remind_at: string) => {
    setFormLoading(true);
    await addReminder(content, remind_at);
    setFormLoading(false);
    setIsModalOpen(false);
  };
  
  const handleDelete = async (id: string) => {
    if (window.confirm("Are you sure you want to delete this reminder?")) {
        await deleteReminder(id);
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="p-8 w-full h-full flex flex-col"
    >
      <div className="flex items-center justify-between mb-8">
        <h2 className="text-3xl font-bold text-white">Reminders</h2>
        <Button onClick={() => setIsModalOpen(true)}>
          <Plus className="mr-2 h-4 w-4" /> New Reminder
        </Button>
      </div>

      {loading ? (
        <div className="flex-1 flex items-center justify-center">
            <Loader2 className="w-8 h-8 text-primary animate-spin" />
        </div>
      ) : reminders.length === 0 ? (
        <div className="flex-1 flex flex-col items-center justify-center text-center">
          <Bell className="w-24 h-24 text-primary/30 mb-6" />
          <h3 className="text-xl font-semibold text-white">No reminders set</h3>
          <p className="text-text-secondary">Click 'New Reminder' to set your first one.</p>
        </div>
      ) : (
        <div className="space-y-4 overflow-y-auto pr-2">
          {reminders.map(reminder => (
            <ReminderItem key={reminder.id} reminder={reminder} onToggle={toggleReminder} onDelete={handleDelete} />
          ))}
        </div>
      )}

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title="New Reminder">
        <ReminderForm onSubmit={handleSubmit} onCancel={() => setIsModalOpen(false)} loading={formLoading} />
      </Modal>
    </motion.div>
  );
};

export default RemindersPage;
